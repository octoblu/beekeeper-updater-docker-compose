#!/bin/bash

SCRIPT_NAME='beekeeper-updater-docker-compose'

# Utility functions
assert_required_params() {
  local beekeeper_url docker_compose_yaml_path github_repo
  beekeeper_url="$1"
  docker_compose_yaml_path="$2"
  github_repo="$3"

  if [ -n "$beekeeper_url" ] && [ -n "$docker_compose_yaml_path" ] && [ -n "$github_repo" ]; then
    return 0
  fi

  usage 1>&2

  if [ -z "$beekeeper_url" ]; then
    err_echo "Missing -b, --beekeeper-url, or BEEKEEPER_URL argument"
  fi

  if [ -z "$docker_compose_yaml_path" ]; then
    err_echo "Missing -p, --path, or DOCKER_COMPOSE_YAML_PATH argument"
  fi

  if [ -z "$github_repo" ]; then
    err_echo "Missing -r, --repo, or GITHUB_REPO argument"
  fi

  exit 1
}

debug() {
  local cyan='\033[0;36m'
  local no_color='\033[0;0m'
  local message="$@"
  matches_debug || return 0
  (>&2 echo -e "[${cyan}${SCRIPT_NAME}${no_color}]: $message")
}

err_echo() {
  local message="$1"
  echo "$message" 1>&2
}

matches_debug() {
  if [ -z "$DEBUG" ]; then
    return 1
  fi

  # we actually *do* want glob match
  # shellcheck disable=SC2053
  if [[ $SCRIPT_NAME == $DEBUG ]]; then
    return 0
  fi
  return 1
}

script_directory(){
  local source="${BASH_SOURCE[0]}"
  local dir=""

  while [ -h "$source" ]; do # resolve $source until the file is no longer a symlink
    dir="$( cd -P "$( dirname "$source" )" && pwd )"
    source="$(readlink "$source")"
    [[ $source != /* ]] && source="$dir/$source" # if $source was a relative symlink, we need to resolve it relative to the path where the symlink file was located
  done

  dir="$( cd -P "$( dirname "$source" )" && pwd )"

  echo "$dir"
}

usage(){
  echo 'USAGE:'
  echo "  ${SCRIPT_NAME} [OPTIONS]"
  echo ''
  echo 'DESCRIPTION:'
  echo '  Pulls down a git repository and updates the docker images in the'
  echo '  indicated docker-compose.yml file to match what the beekeeper'
  echo '  says.'
  echo ''
  echo 'OPTIONS:'
  echo '  -b, --beekeeper-url  url to beekeeper, including auth'
  echo '                       (env: BEEKEEPER_URL)'
  echo '  -h, --help           Print this help text'
  echo '  -i, --interval       Time between runs in seconds. Defaults to "60"'
  echo '                       (env: INTERVAL)'
  echo '  -p, --path           Path within the github repository where the'
  echo '                       docker-compose.yml file is located relative to'
  echo '                       the repo root. (env: DOCKER_COMPOSE_YAML_PATH)'
  echo '  -r, --repo           Github repository where the docker-compose.yml'
  echo '                       file is located. Auth information can be included'
  echo '                       here using standard the basic auth format:'
  echo '                       https://<user>:<password/token>@github.com/<org>/<project>'
  echo '                       (env: GITHUB_REPO)'
  echo '  -s, --single-run     Do a single run instead of running in infinite mode'
  echo '                       (env: SINGLE_RUN="true")'
  echo '  -v, --version        print the version'
  echo ''
  echo 'ENVIRONMENT:'
  echo '  DEBUG            print debug output'
  echo ''
  echo ''
}

version(){
  local directory
  directory="$(script_directory)"

  if [ -f "$directory/VERSION" ]; then
    cat "$directory/VERSION"
  else
    echo "unknown-version"
  fi
}

# App functions
fetch_beekeeper() {
  local beekeeper_path beekeeper_url curl_exit_code curl_stderr_path curl_stdout_path curl_stderr curl_stdout query_string

  beekeeper_url="$1"
  beekeeper_path="$2"
  beekeeper_tags="$3"

  curl_stdout_path="$(mktemp)"
  curl_stderr_path="$(mktemp)"

  if [ "$beekeeper_tags" != "" ]; then
    query_string="?tags=$beekeeper_tags"
  fi

  curl --silent --fail --verbose "$beekeeper_url/deployments/$beekeeper_path/latest$query_string" \
    1> "$curl_stdout_path" \
    2> "$curl_stderr_path"

  curl_exit_code="$?"

  curl_stdout="$(cat "$curl_stdout_path")"
  curl_stderr="$(cat "$curl_stderr_path")"

  rm "$curl_stderr_path" "$curl_stdout_path"

  if [ "$curl_exit_code" != "0" ]; then
    echo "$curl_stderr" \
    | grep "The requested URL returned error: 404 Not Found" &> /dev/null \
    && debug "$beekeeper_path not known to beekeeper, skipping" \
    && return 0

    err_echo "failed to identify the expected image from beekeeper: $curl_stdout $curl_stderr"
    return 1
  fi

  echo "$curl_stdout"
}

get_current_image() {
  set -o pipefail

  local docker_compose_json docker_compose_yaml_path service_name
  docker_compose_yaml_path="$1"
  service_name="$2"

  get_docker_compose_json "$docker_compose_yaml_path" \
  | jq --raw-output ".services[\"$service_name\"].image"
}

get_docker_compose_json() {
  local docker_compose_yaml_path
  docker_compose_yaml_path="$1"

  remarshal \
    --input="$docker_compose_yaml_path" \
    --input-format=yaml \
    --output-format=json
}

get_expected_image() {
  set -o pipefail

  local beekeeper_path beekeeper_url beekeeper_tags current_image output

  beekeeper_url="$1"
  current_image="$2"
  beekeeper_tags="$3"
  beekeeper_path="$(echo -n "$current_image" | sed -e 's/:.*//g')"

  output="$(fetch_beekeeper "$beekeeper_url" "$beekeeper_path" "$beekeeper_tags")" || return 1
  if [ -z "$output" ]; then
    return 0
  fi

  echo "$output" | jq --raw-output '.docker_url'
}

get_services() {
  set -o pipefail

  local docker_compose_yaml_path docker_compose_json
  docker_compose_yaml_path="$1"

  if [ ! -f "$docker_compose_yaml_path" ]; then
    err_echo "no file found at: '$PWD/$docker_compose_yaml_path'"
    return 1
  fi

  docker_compose_json="$(get_docker_compose_json "$docker_compose_yaml_path")" || return $?

  if [ "null" == "$(echo "$docker_compose_json" | jq '.services')" ]; then
    err_echo "key 'services' not found in docker-compose.yml (or was null)"
    return 1
  fi

  echo -n "$docker_compose_json" | jq --compact-output --raw-output '.services | keys[]'
}

run() {
  debug "run"
  local beekeeper_url beekeeper_tags docker_compose_yaml_path services
  beekeeper_url="$1"
  docker_compose_yaml_path="$2"
  beekeeper_tags="$3"

  debug "updating repository"
  git pull --quiet || return 1

  services=( $(get_services "$docker_compose_yaml_path") ) || return 1

  for service in "${services[@]}"; do
    debug "service: $service"
    update_service "$beekeeper_url" "$docker_compose_yaml_path" "$service" "$beekeeper_tags" || return 1
  done

  if [ -z "$(git status --porcelain)" ]; then
    return 0
  fi

  git add "$docker_compose_yaml_path" \
  && git pull --quiet \
  && git commit --quiet --message "Updated: $docker_compose_yaml_path" > /dev/null \
  && git push --quiet
}

run_forever() {
  local beekeeper_url beekeeper_tags docker_compose_yaml_path interval
  interval="$1"
  beekeeper_url="$2"
  docker_compose_yaml_path="$3"
  beekeeper_tags="$4"

  while true; do
    run "$beekeeper_url" "$docker_compose_yaml_path" "$beekeeper_tags" || exit 1
    debug "sleeping for ${interval}s"
    sleep "$interval"
  done
}

setup() {
  debug 'setup'
  local exit_code git_clone_output github_repo repo_dir
  repo_dir="$1"
  github_repo="$2"

  git config --global user.email "updater@example.com"
  git config --global user.name "beekeeper-updater-docker-compose "
  git_clone_output="$(git clone --quiet --depth=1 "$github_repo" "$repo_dir")"
  exit_code=$?

  if [ "$exit_code" != "0" ]; then
    err_echo "$git_clone_output"
    return 1
  fi
}

update_service() {
  local beekeeper_url beekeeper_tags current_image docker_compose_yaml_path expected_image service_name

  beekeeper_url="$1"
  docker_compose_yaml_path="$2"
  service_name="$3"
  beekeeper_tags="$4"

  current_image="$(get_current_image "$docker_compose_yaml_path" "$service_name")" || return 1
  expected_image="$(get_expected_image "$beekeeper_url" "$current_image" "$beekeeper_tags")" || return 1

  if [ -z "$expected_image" ] || [ "$current_image" == "$expected_image" ]; then
    debug "up to date, skipping"
    return 0
  fi

  debug "updating $service_name from '$current_image' to '$expected_image'"
  update_with_expected_image "$docker_compose_yaml_path" "$service_name" "$expected_image"
}

update_with_expected_image() {
  local docker_compose_json docker_compose_yaml_path expected_image service_name
  docker_compose_yaml_path="$1"
  service_name="$2"
  expected_image="$3"

  docker_compose_json="$(get_docker_compose_json "$docker_compose_yaml_path")" || return 1
  docker_compose_json="$(echo "$docker_compose_json" | jq --arg image "$expected_image" ".services[\"$service_name\"].image = \$image")"
  echo "$docker_compose_json" \
  | remarshal \
    --input-format=json \
    --output-format=yaml \
    --output="$docker_compose_yaml_path"
}

# main execution function
main() {
  local beekeeper_url beekeeper_tags docker_compose_yaml_path github_repo interval repo_dir single_run
  # Define args up here
  while [ "$1" != "" ]; do
    local param="$1"
    local value="$2"
    case "$param" in
      -h | --help)
        usage
        exit 0
        ;;
      -v | --version)
        version
        exit 0
        ;;
      -b | --beekeeper-url)
        beekeeper_url="$value"
        shift
        ;;
      -t | --beekeeper-tags)
        beekeeper_tags="$value"
        shift
        ;;
      -i | --interval)
        interval="$value"
        shift
        ;;
      -p | --path)
        docker_compose_yaml_path="$value"
        shift
        ;;
      -r | --repo)
        github_repo="$value"
        shift
        ;;
      -s | --single-run)
        single_run='true'
        ;;
      # Arg with value
      # -x | --example)
      #   example="$value"
      #   shift
      #   ;;
      # Arg without value
      # -e | --example-flag)
      #   example_flag='true'
      #   ;;
      *)
        if [ "${param::1}" == '-' ]; then
          echo "ERROR: unknown parameter \"$param\""
          usage
          exit 1
        fi
        # Set main arguments
        # if [ -z "$main_arg" ]; then
        #   main_arg="$param"
        # elif [ -z "$main_arg_2"]; then
        #   main_arg_2="$param"
        # fi
        ;;
    esac
    shift
  done

  beekeeper_url="${beekeeper_url:-$BEEKEEPER_URL}"
  beekeeper_tags="${beekeeper_tags:-$BEEKEEPER_TAGS}"
  docker_compose_yaml_path="${docker_compose_yaml_path:-$DOCKER_COMPOSE_YAML_PATH}"
  github_repo="${github_repo:-$GITHUB_REPO}"
  interval="${interval:-$INTERVAL}"
  interval="${interval:-60}"
  repo_dir="$PWD/repository"

  if [ -z "$single_run" ] && [ "$SINGLE_RUN" == "true" ]; then
    single_run="true"
  fi

  assert_required_params "$beekeeper_url" "$docker_compose_yaml_path" "$github_repo"

  setup "$repo_dir" "$github_repo" || exit 1

  pushd "$repo_dir" > /dev/null

  if [ "$single_run" == "true" ]; then
    run "$beekeeper_url" "$docker_compose_yaml_path"
    exit $?
  fi
  run_forever "$interval" "$beekeeper_url" "$docker_compose_yaml_path" "$beekeeper_tags"
}

main "$@"
